# This is a basic workflow that is triggered by a new pull request to a specific branch
# Branch is specified below: [on: -> pull_request: -> branches: -> main (switch this)]
# This workflow utilizes acu-pack to create a delta package containing only what was changed
# Workflow checks out merge commit from PR and validates to Salesforce
# Pair this workflow with the deploy-deltas-on-pr-merged to have changes validated and reviewed before the deployment
# Update the SOURCE_DIR to the directory you want acu-pack to create a delta package from

name: Validate Deltas on Pull Request Creation

on:
  pull_request:
    branches:
      - develop
    paths:
      - force-app/**
  
env:
  SFDX_AUDIENCE_URL: https://test.salesforce.com
  SALESFORCE_ORG_USERNAME: malquist@salesforce.com.pipeline.dev # Salesforce username of target org
  SALESFORCE_ORG_URL: https://acumensolutionsasalesforc34-dev-ed.my.salesforce.com # Salesforce URL of target org
  SALESFORCE_CONSUMER_KEY: ${{ secrets.SALESFORCE_CONSUMER_KEY_DEV }} # SFDX App consumer key from target org
  SOURCE_DIR: force-app # Directory you want acu-pack to create a delta package from

jobs:
  validate:
    name: Validate Deltas
    runs-on: ubuntu-latest
    container:
      image: abirch216/salesforce_devops:sfdx

    steps:
      - name: adding github workspace as safe directory
        run: git config --global --add safe.directory $GITHUB_WORKSPACE
      
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          
      - name: Install acu-pack
        run: |
          echo "y" | sfdx plugins:install https://${{ secrets.ACUPACK_CREDS }}@github.com/CSGAMERSServices/acu-pack.git
      
      - name: Authenticate Salesforce Org
        run: |
          echo "${{ secrets.JWTKEY }}" > server.key
          sfdx force:auth:jwt:grant --jwtkeyfile server.key --clientid "${SALESFORCE_CONSUMER_KEY}" --username "${SALESFORCE_ORG_USERNAME}" --instanceurl "${SALESFORCE_ORG_URL}"

      - name: Setup Git User
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          
      - name: Generate Deploy Package
        run: |
          git --no-pager diff HEAD^ --name-status --no-renames > git_diff.txt
          mkdir deploy
          sfdx acumen:source:delta:git -g git_diff.txt -s "${SOURCE_DIR}" -d deploy

      - name: Validate Delta Package to Target Org
        id: validate-salesforce
        run: |
          (
            set -o pipefail
            # Checks to see if class directory exists in package generated by thorax
            if [ -d "deploy/main/default/classes" ] || [ -d "deploy/main/default/triggers" ]
            then
              # Class(es)/Trigger(s) were modified in feature branch so the build will run specified tests from the qatests.txt
              sfdx force:source:deploy -c -u "${SALESFORCE_ORG_USERNAME}" -p deploy -l RunSpecifiedTests -r $(<qatests.txt) -g | tee results.txt
            else
              # Class/Trigger was not modified in feature branch so the build will not run any tests.
              sfdx force:source:deploy -c -u "${SALESFORCE_ORG_USERNAME}" -p deploy -l NoTestRun -g | tee results.txt
            fi
          )
        shell: bash

      - name: Collect Results
        id: collect-results
        if: ${{ always() }}
        run: |
          (
            RESULTS=$(cat results.txt)
            echo ${RESULTS}
            RESULTS="${RESULTS//'%'/'%25'}"
            RESULTS="${RESULTS//$'\n'/'%0A'}"
            RESULTS="${RESULTS//$'\r'/'%0D'}"
            echo "::set-output name=results::${RESULTS}"
          )
        shell: bash

      - name: Update Pull Request
        if: ${{ always() }}
        uses: actions/github-script@v5.0.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Validation to Salesforce: \`${{ steps.validate-salesforce.outcome }}\`

            <details><summary>Show Salesforce Validation Output</summary>

            \`\`\`\n
            ${{ steps.collect-results.outputs.results }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Workflow: \`${{ github.workflow }}\`, Workflow Run Number: \`${{ github.run_number }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
            
